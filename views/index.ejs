<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"
        integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="stylesheets/style.css">
    <script src="https://kit.fontawesome.com/3a12e18fd4.js" crossorigin="anonymous"></script>
    <title>Document</title>

</head>

<body>
    <div class="slack">
        <div class="profilebar">
            
            <a href="/profil"><div class="photo"
                style="background-image: url(uploads/<%=name%>-<%=userid%>.jpg);">
                <div class="online"></div>
            </div></a>
            <h1 id="username"><%= name %></h1>
           <button> <a href="/profil" type="button">Edit profile</a></button>
            <form action="/logout?_method=DELETE" method="POST">
                <button type="submit">Log Out</button>
            </form>

            <div class="users">
                <div id="online-users"></div> <br>
                <div id="list-online-users" tabindex="1">

                </div>
            </div>

        </div>


        <!-- <div class="container"> -->
        <div class="sidebar">
            <div class="room-container" id="room-container">
                <h2>Channels</h2>
                <input id="addRoom" type="text" placeholder="Type a new room name">
                <button type="button" onclick="createRoom()">Add</button>
                <div id="error-container-room"></div>
                <div id="room-list">
                    <% rooms.forEach(element => { %>
                    <p><%=element%></p>
                    <% }); %>
                </div>
            </div>

            <div class="direct-messages">
                <h2>Direct Messages</h2>   
                <div id="direct-message-list">
                    
                </div> 
            </div>

        </div>
        <section class="chat">
            <div class="chat-container">
                <div class="header-chat">
                    <i class="icon fa fa-user-o" aria-hidden="true"></i>
                    <div id="room-name">
                        <h1>Room</h1>
                    </div>
                    <i class="icon clickable fa fa-ellipsis-h right" aria-hidden="true"></i>
                </div>


                <div id="message-container"></div>
                <div class="messages-chat">
                    <div class="message">
        
                </div>
                
                <div class="footer-chat" class="send-message-container">
                    <span id="typing"></span>
                    <div id="emoji-div">
                        <% for(let i=0; i < emojis.length; i++) { %>
                            <span class="emoji-class"><%= emojis[i] %></span>
                        <% } %>
                    </div>
                    <i class="icon fa fa-smile-o clickable" style="font-size:25pt;" aria-hidden="true" id="big-smile"></i>
                    <input id="message" class="write-message" placeholder="Type your message here" type="text">
                    <i class="icon send fa fa-paper-plane-o clickable" aria-hidden="true"></i>
                    <button type="button" onclick="sendMessage()" class="icon send fa fa-paper-plane-o clickable"
                        id="sendBtn" aria-hidden="true"></button>

                </div>
            </div>
        </section>
    </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>

    <script>
        var socket = io();
        var users = [];
        var usersOnline = [];
        // addEventlistener on room list
        document.getElementById('room-list').addEventListener('click', e => {
            if (e.target.parentElement.id == 'room-list') {
                let roomClicked = e.target.innerHTML;
                enterRoom(roomClicked);
            }
        });
        // addEventListener on online users list
        document.getElementById('list-online-users').addEventListener('click', e => {
            if (e.target.parentElement.id == 'list-online-users') {
                let userClickedID = e.target.value;
                let userClickedName = e.target.innerHTML;
                startPrivate(userClickedName, userClickedID);
            }
        });
        //Eventlistener on private rooms
        document.getElementById('direct-message-list').addEventListener('click', e => {
            if (e.target.parentElement.id == 'direct-message-list') {
                let dmClicked = e.target.innerHTML;
                enterPrivateRoom(dmClicked)
            }   
        });
        socket.on('broadcastOnlineUsersConnect', data => {
            document.getElementById('online-users').innerHTML = data.description;
            let name = document.getElementById('username').innerHTML;
            socket.emit('user-online', { id: data.id, name: name });
        });
        socket.on('broadcastOnlineUsersDisconnect', data => {
            document.getElementById('online-users').innerHTML = data.description;
        });
        socket.on('newmsg', data => {
            console.log('incoming');
            if (users) {
                document.getElementById('message-container').innerHTML += '<div>' + data.user + ': ' + data.msg + '</div>';
            }
        });
        socket.on('room-exists', data => {
            document.getElementById('error-container-room').innerHTML = data;
            setTimeout(() => {
                document.getElementById('error-container-room').innerHTML = '';
            }, 4000);
        });
        socket.on('room-set', data => {
            document.getElementById('room-list').innerHTML += '<p class="chatRoom">' + data + '</p>';
        });
        socket.on('private-room-set', data => {
            document.getElementById('direct-message-list').innerHTML += '<p class="chatRoom">' + data + '</p>';
        });

        socket.on('private-rooms-update', data => {
            document.getElementById('direct-message-list').innerHTML = '';
            for (let privateroom of data.privaterooms) {
                let p = document.createElement('p');
                p.setAttribute('class', 'chatRoom');
                p.innerHTML = privateroom;
                document.getElementById('direct-message-list').appendChild(p);
            }
        });

        socket.on('connect-to-room', data => {
            document.getElementById('message-container').innerHTML += '<div>' + data + '</div>';
        });
        socket.on('all-connected-users', data => {
            document.getElementById('list-online-users').innerHTML = '';
            for (let user of data) {
                let p = document.createElement('p');
                p.setAttribute('class', 'list-online-users');
                p.setAttribute('class', 'fas fa-user')
                p.innerHTML = user.name;
                p.value = user.id;
                document.getElementById('list-online-users').appendChild(p);
            }
        });

  

        socket.on('print-messages', data => {
            console.log(data.messages);
            data.messages.forEach(message => {
                let p = message.user + ': ' + message.message_body;
                printMessage(p);
                /* console.log(message.user + ': ' + message.message_body); */
            });
        })

        ////////////////////////////////////////////////////////////////////////////
        //  Show when someone is typing

        let textArea = document.getElementById('message')
        let typing = document.getElementById('typing')

        textArea.addEventListener('keyup', (e) => {

            let user = document.getElementById('username').innerHTML;
            let room = document.getElementById('room-name').innerHTML;

            if (e.which === 13) {
                // Send FALSE when presing ENTER
                socket.emit('typingEvent', {user: user, room: room, status: false});
            } else if (textArea.value == "") {
                // Send FALSE when text has been deleted on textArea
                socket.emit('typingEvent', {user: user, room: room, status: false});
            } else {
                // Send TRUE when user is typing
                socket.emit('typingEvent', {user: user, room: room, status: true});
            }
        });

        // Status TRUE: Show user typing / Status FALSE: Show nothing
        socket.on('typingEvent', data => {
            if (data.status)
                typing.innerHTML = data.user + ' is typing...';
            else
                typing.innerHTML = '';
        });        
        ////////////////////////////////////////////////////////////////////////////

        //Function to send message in chat
        function sendMessage() {
            let msgElement = document.getElementById('message');
            let msg = msgElement.value;
            let room = document.getElementById('room-name').innerHTML;
            let user = document.getElementById('username').innerHTML;
            if (msg) {
                socket.emit('msg', { message: msg, user: user, room: room });
                // Need to append the message here for the sender (`You: ${msg}`);
                document.getElementById('message-container').innerHTML += '<div>You: ' + msg + '</div>';
                // Clear the text-input for new message
                msgElement.value = '';
            }  
        }
        // Eventlistener on enter
        let msgOnEnter = document.getElementById('message');
        msgOnEnter.addEventListener('keydown', function (e) {
            if (e.keyCode === 13) {
                sendMessage();
            }
        });
        function createRoom() {
            var newRoomName = document.getElementById('addRoom').value;
            if (newRoomName) {
                socket.emit('new-room', newRoomName);
            }
        }
        function enterRoom(room) {
            let user = document.getElementById('username').innerHTML;
            document.getElementById('room-name').innerHTML = room;
            socket.emit('room-entered', { room: room, user: user });
            // Clear messages
            document.getElementById('message-container').innerHTML = '';
        }
        function startPrivate(userClickedName, userClickedID) {
            let userClicked = {
                name: userClickedName,
                id: userClickedID
            }
            let userFromName = document.getElementById('username').innerHTML;
            console.log(userClicked);
            let user = document.getElementById('list-online-users').innerHTML;
            
            document.getElementById('room-name').innerHTML = userClickedName;
            // Condition -> Create only if room name doesn't exist
            socket.emit('create-private-room', { room: userClickedName, usernameTo: userClickedName, userId: userClickedID, usernameFrom: userFromName });
            // Clear messages
            document.getElementById('message-container').innerHTML = '';
         
        }
        function enterPrivateRoom(dmClicked) {
            document.getElementById('room-name').innerHTML = dmClicked;
            let userFromName = document.getElementById('username').innerHTML;
            socket.emit('private-room-entered', {room: dmClicked, usernameFrom: userFromName});
            document.getElementById('message-container').innerHTML = '';
        }
        function printMessage(message) {
                document.getElementById('message-container').innerHTML += '<div>' + message + '</div>';
            
        }
        // Hide emoji-div when loading page
        $('#emoji-div').hide();
        // Show/Hide emoji-div
        $('#big-smile').click(function(){
            $('#emoji-div').toggle('fast');
        })
        // Insert an emoji when clicking on one of them
        $('.emoji-class').click(function() {
            let emoCopy = $(this).clone()
            emoCopy = emoCopy.text()
            textTemp = $('#message').val()
            // Text content won't erase when inserting emoji
            $('#message').val(  textTemp  + emoCopy  )
        })
    </script>
</body>

</html>